import cv2
import numpy as np

# Kamera kalibrasyon parametrelerini yükle
with np.load('calib.npz') as X:
    mtx, dist, _, _ = [X[i] for i in ('mtx','dist','rvecs','tvecs')]

# İki kamerayı tanımla
cam1 = cv2.VideoCapture(0)
cam2 = cv2.VideoCapture(1)

# StereoBM veya StereoSGBM algoritmasını seç
stereo = cv2.StereoBM_create(numDisparities=16, blockSize=15)
# stereo = cv2.StereoSGBM_create(minDisparity=0, numDisparities=16, blockSize=5)

# Q matrisini oluştur
Q = np.float32([[1, 0, 0, -320],
                [0, 1, 0, -240],
                [0, 0, 0, 1],
                [0, 0, -1/100, 0]])

while True:
    # İki kameradan görüntü al
    ret1, img1 = cam1.read()
    ret2, img2 = cam2.read()

    # Görüntüleri griye çevir
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

    # Görüntüleri düzelt
    img1_undistorted = cv2.undistort(gray1, mtx, dist, None, mtx)
    img2_undistorted = cv2.undistort(gray2, mtx, dist, None, mtx)

    # Görüntüleri birleştir ve yer değişimi haritası oluştur
    disparity = stereo.compute(img1_undistorted, img2_undistorted)

    # Yer değişimi haritasını kullanarak derinlik hesapla
    depth = cv2.reprojectImageTo3D(disparity, Q)

    # Görüntüleri ve derinliği göster
    cv2.imshow('img1', img1)
    cv2.imshow('img2', img2)
    cv2.imshow('disparity', disparity)
    cv2.imshow('depth', depth)

    # q tuşuna basarak çık
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Kamerayı ve pencereleri kapat
cam1.release()
cam2.release()
cv2.destroyAllWindows()




# Noktaları tanımlayalım
x = 3
y = 2
x0 = 7
y0 = 8

# Doğrunun eğimini bulalım
m = (y - y0) / (x - x0)

# Eğimden açıyı bulalım
import math
angle = math.degrees(math.atan(m))

# Açıyı yazdıralım
print("Doğrunun açısı:", angle, "derecedir.")

